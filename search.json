[{"path":"https://randrescastaneda.github.io/stamp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 stamp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp-algorithm.html","id":"fastest","dir":"Articles","previous_headings":"","what":"fastest","title":"stamp-algorithm","text":"Let’s use Reporter-Partner trade data commodity level USA 2015 2020 huge data dataset 1828772 observations.","code":"library(tradestatistics) # US HS4-level trade from 2010 to 2020 x <- ots_create_tidy_data(years = x1:x2,                          reporters = \"usa\",                          table = \"yrpc\") #> Downloading data for the combination 2015, usa, all... #> Downloading data for the combination 2016, usa, all... #> Downloading data for the combination 2017, usa, all... #> Downloading data for the combination 2018, usa, all... #> Downloading data for the combination 2019, usa, all... #> Downloading data for the combination 2020, usa, all... bench <- microbenchmark::microbenchmark(   times = times,   md5 = stamp_get(x, algo = \"md5\"),   sha1 = stamp_get(x, algo = \"sha1\"),   crc32 = stamp_get(x, algo = \"crc32\"),   sha256 = stamp_get(x, algo = \"sha256\"),   sha512 = stamp_get(x, algo = \"sha512\"),   xxhash32 = stamp_get(x, algo = \"xxhash32\"),   xxhash64 = stamp_get(x, algo = \"xxhash64\"),   murmur32 = stamp_get(x, algo = \"murmur32\"),   spookyhash = stamp_get(x, algo = \"spookyhash\"),   blake3 = stamp_get(x, algo = \"blake3\") ) if (requireNamespace(\"highcharter\")) {   hc_dt <- highcharter::data_to_boxplot(bench,                                         time,                                         expr,                                         add_outliers = FALSE,                                         name = \"Time in milliseconds\")    highcharter::highchart() |>   highcharter::hc_xAxis(type = \"category\") |>   highcharter::hc_chart(inverted=TRUE) |>   highcharter::hc_add_series_list(hc_dt)    } else {   boxplot(bench, outline = FALSE) } #> Loading required namespace: highcharter #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo res <- as.data.table(bench) med <- res[, .(median = median(time)), by = expr] # minmed <- med[, .SD[which.min(median)]] minmed <- med[which.min(median), as.character(expr)]"},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp-algorithm.html","id":"shortest","dir":"Articles","previous_headings":"","what":"shortest","title":"stamp-algorithm","text":"","code":"algos <- c(\"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\",                       \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\",                       \"blake3\")  x <- 1:5  ln <- sapply(algos, \\(.) {   st <- stamp_get(x,.)   nchar(st$stamps) })  ln <- sort(ln) ln  #>      crc32   xxhash32   murmur32   xxhash64        md5 spookyhash       sha1  #>          8          8          8         16         32         32         40  #>     sha256     blake3     sha512  #>         64         64        128  st <- ln[1] st #> crc32  #>     8"},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"stamp","text":"inspired datasignature Stata command","code":""},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp.html","id":"stamp-and-digest","dir":"Articles","previous_headings":"","what":"stamp and digest","title":"stamp","text":"basic level, {stamp} wrapper {digest} package creates hashed arbitrary objects using different algorithms. , basic function stamp, stamp_get(), used functions stamp, receives arguments digest::digest(). main differences stamp_get() returns hash every element list object single hash atomic vector. addition, returns information time date hash calculated algorithm used.","code":"# stamp of a data frame stamp_get(x) #> $stamps #> $stamps$a #> [1] \"f8c70106cb55eb803d1ab78e093bc2d1\" #>  #> $stamps$b #> [1] \"5802b7a27d20ad9feb00616660d4c1e7\" #>  #>  #> $time #> $time$tz #> [1] \"UTC\" #>  #> $time$tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $time$usetz #> [1] FALSE #>  #> $time$st_time #> [1] \"20230126170242\" #>  #>  #> $algo #> [1] \"spookyhash\"  # stamp of an atomic vector stamp_get(letters) #> $stamps #> $stamps[[1]] #> [1] \"b85e2561a4cab45b3798abcf32a54464\" #>  #>  #> $time #> $time$tz #> [1] \"UTC\" #>  #> $time$tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $time$usetz #> [1] FALSE #>  #> $time$st_time #> [1] \"20230126170242\" #>  #>  #> $algo #> [1] \"spookyhash\""},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp.html","id":"save-the-stamp","dir":"Articles","previous_headings":"","what":"Save the Stamp","title":"stamp","text":"Getting stamp useful. main idea stamp package keep track R object find process data changed. can two different complementary ways. Either saving stamps memory saving stamp disk.","code":""},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp.html","id":"set-stamps","dir":"Articles","previous_headings":"Save the Stamp","what":"Set stamps","title":"stamp","text":"{stamp] allows save stamps memory, making use special environment call .stamp created time {stamp} package loaded. long don’t restart R session, objects saved environment available continuous use. save stamp use stamp_set(), require object want stamp , ideally, name stamp. don’t provide name, stamp_set() create random name . useful interactive sessions.","code":"# with name stamp_set(x = x, st_name = \"x_st\")  # with random name stamp_set(x = x)"},{"path":"https://randrescastaneda.github.io/stamp/articles/stamp.html","id":"call-stamps","dir":"Articles","previous_headings":"Save the Stamp","what":"Call stamps","title":"stamp","text":"avoid mistakes, {stamp] makes difficult access directly stamps saved memory. need call stamp, best way using stamp_call() don’t need remember stamps save memory. can get names using stamps_env() . Notice second name see random name generated stamp_set(x = x).","code":"stamp_call(st_name = \"x_st\") #> $stamps #> $stamps$a #> [1] \"f8c70106cb55eb803d1ab78e093bc2d1\" #>  #> $stamps$b #> [1] \"5802b7a27d20ad9feb00616660d4c1e7\" #>  #>  #> $time #> $time$tz #> [1] \"UTC\" #>  #> $time$tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $time$usetz #> [1] FALSE #>  #> $time$st_time #> [1] \"20230126170242\" #>  #>  #> $algo #> [1] \"spookyhash\" stamp_env() #> [1] \"x_st\"     \"e1lx03rq\""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andres Castaneda. Author, maintainer.","code":""},{"path":"https://randrescastaneda.github.io/stamp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castaneda R (2023). stamp: Read Write R Objects Data Hash. https://github.com/randrescastaneda/stamp, https://randrescastaneda.github.io/stamp/.","code":"@Manual{,   title = {stamp: Read and Write R Objects with Data Hash},   author = {R.Andres Castaneda},   year = {2023},   note = {https://github.com/randrescastaneda/stamp, https://randrescastaneda.github.io/stamp/}, }"},{"path":"https://randrescastaneda.github.io/stamp/index.html","id":"stamp","dir":"","previous_headings":"","what":"An R package for putting a stamp to your data","title":"An R package for putting a stamp to your data","text":"goal stamp …","code":""},{"path":"https://randrescastaneda.github.io/stamp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for putting a stamp to your data","text":"can install development version stamp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"randrescastaneda/stamp\")"},{"path":"https://randrescastaneda.github.io/stamp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R package for putting a stamp to your data","text":"basic example shows solve common problem:","code":"library(stamp) ## basic example code"},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"change file extension to new ext — change_file_ext","title":"change file extension to new ext — change_file_ext","text":"change file extension new ext","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"change file extension to new ext — change_file_ext","text":"","code":"change_file_ext(file, ext)"},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"change file extension to new ext — change_file_ext","text":"file character: current file path old ext ext character: new ext","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"change file extension to new ext — change_file_ext","text":"character file path","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whther object can be saved in tabular formats like fst — check_complex_data","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"Check whther object can saved tabular formats like fst","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"","code":"check_complex_data(x)"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"x R object write disk per limitations file format.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"logical complex data","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"","code":"if (FALSE) { # False check_complex_data(data.frame())  # TRUE check_complex_data(list()) }"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that file format is supported and that package is available — check_file","title":"Check that file format is supported and that package is available — check_file","text":"Check file format supported package available","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that file format is supported and that package is available — check_file","text":"","code":"check_file(file)"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that file format is supported and that package is available — check_file","text":"file character: file path read","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that file format is supported and that package is available — check_file","text":"invisible TRUE","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the format is in Namespace — check_format","title":"Check whether the format is in Namespace — check_format","text":"Use valus ext check corresponding package available. , defaults Rds","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the format is in Namespace — check_format","text":"","code":"check_format(file_ext, ext = NULL)"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the format is in Namespace — check_format","text":"file_ext character: File extension ext character: format extension file. Default fs::path_ext(file)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the format is in Namespace — check_format","text":"character extension desired format","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the format is in Namespace — check_format","text":"","code":"if (FALSE) { fmt <- check_format(file_ext = \"fst\") fmt }"},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirms if data has changed — confirm_data","title":"Confirms if data has changed — confirm_data","text":"Confirms data changed","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirms if data has changed — confirm_data","text":"","code":"confirm_data(ss, sh, verbose = getOption(\"stamp.verbose\"))"},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirms if data has changed — confirm_data","text":"ss stamps stamp sh stamps hash verbose logical: whether display additional information","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirms if data has changed — confirm_data","text":"invisible TRUE confirm passes FALSE otherwise.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_names.html","id":null,"dir":"Reference","previous_headings":"","what":"confirm names of objects match — confirm_names","title":"confirm names of objects match — confirm_names","text":"confirm names objects match","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"confirm names of objects match — confirm_names","text":"","code":"confirm_names(ss, sh, verbose = getOption(\"stamp.verbose\"))"},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"confirm names of objects match — confirm_names","text":"ss stamps stamp sh stamps hash verbose logical: whether display additional information","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/confirm_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"confirm names of objects match — confirm_names","text":"invisible TRUE confirm passes FALSE otherwise.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure file names and directory paths are working fine — ensure_file_path","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"Make sure file names directory paths working fine","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"","code":"ensure_file_path(file, recurse)"},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"file character: File connection write recurse logical: TRUE directory file created. Default FALSE","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"character vector file path","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Stamp directory — format_st_dir","title":"Format Stamp directory — format_st_dir","text":"Format Stamp directory","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Stamp directory — format_st_dir","text":"","code":"format_st_dir(st_dir = NULL)"},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Stamp directory — format_st_dir","text":"st_dir character: parent directory store stamp file (see details).","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Stamp directory — format_st_dir","text":"formatted directory","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Format stamp file — format_st_file","title":"Format stamp file — format_st_file","text":"Format stamp file","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format stamp file — format_st_file","text":"","code":"format_st_file(   st_dir = NULL,   st_name = NULL,   st_ext = getOption(\"stamp.default.ext\"),   seed = NULL )"},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format stamp file — format_st_file","text":"st_dir character: parent directory store stamp file (see details). st_name character: name stamp file. stamp files prefixed value option \"stamp.stamp_prefix\", default \"st_\". need add prefix. st_ext character: format stamp file save. Default value option \"stamp.default.ext\" seed numeric: seed random name. Default NULL time random name generated . Use replicability purposes","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format stamp file — format_st_file","text":"formatted directory","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Stamp name — format_st_name","title":"Format Stamp name — format_st_name","text":"Format Stamp name","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Stamp name — format_st_name","text":"","code":"format_st_name(   st_name = NULL,   st_nm_pr = getOption(\"stamp.stamp_prefix\"),   seed = NULL )"},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Stamp name — format_st_name","text":"st_name character: name stamp file. stamp files prefixed value option \"stamp.stamp_prefix\", default \"st_\". need add prefix. st_nm_pr character: st_name prefix save file. default value option \"stamp.stamp_prefix\". seed numeric: seed random name. Default NULL time random name generated . Use replicability purposes","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/format_st_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Stamp name — format_st_name","text":"formatted directory","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading function depending on format selected — get_reading_fun","title":"Reading function depending on format selected — get_reading_fun","text":"Reading function depending format selected","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading function depending on format selected — get_reading_fun","text":"","code":"get_reading_fun(ext = \"Rds\")"},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading function depending on format selected — get_reading_fun","text":"ext character: format extension file. Default fs::path_ext(file)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading function depending on format selected — get_reading_fun","text":"reading function according ext","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading function depending on format selected — get_reading_fun","text":"","code":"if (FALSE) { # Rds default read_fun <- get_reading_fun() read_fun  # fst format read_fun <- get_reading_fun(ext=\"fst\") read_fun }"},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Saving function depending on format selected — get_saving_fun","title":"Saving function depending on format selected — get_saving_fun","text":"Saving function depending format selected","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saving function depending on format selected — get_saving_fun","text":"","code":"get_saving_fun(ext = \"Rds\")"},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saving function depending on format selected — get_saving_fun","text":"ext character: format extension file. Default fs::path_ext(file)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saving function depending on format selected — get_saving_fun","text":"saving function according ext returns logical value depending whether file saved successfully","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saving function depending on format selected — get_saving_fun","text":"","code":"if (FALSE) { # Rds default save_fun <- get_saving_fun() save_fun  # fst format save_fun <- get_saving_fun(ext=\"fst\") save_fun }"},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file names and paths — path_info","title":"Get file names and paths — path_info","text":"Get file names paths","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file names and paths — path_info","text":"","code":"path_info(   file,   ext = fs::path_ext(file),   st_dir = NULL,   vintage = getOption(\"stamp.vintage\"),   vintage_dir = NULL,   recurse = FALSE )"},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file names and paths — path_info","text":"file character: File connection write ext character: format extension file. Default fs::path_ext(file) st_dir character: Directory store stamp files. default subdirectory level file. vintage logical: Whether save vintage versions x. Default TRUE vintage_dir character: Directory save vintages x. default subdirectory level file recurse logical: TRUE directory file created. Default FALSE","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file names and paths — path_info","text":"list directories files information","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether format is supported and package is available — pkg_available","title":"Check whether format is supported and package is available — pkg_available","text":"Check whether format supported package available","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether format is supported and package is available — pkg_available","text":"","code":"pkg_available(ext)"},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether format is supported and package is available — pkg_available","text":"ext character: extension file","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether format is supported and package is available — pkg_available","text":"logical vector availability package","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether format is supported and package is available — pkg_available","text":"","code":"if (FALSE) { pkg_available(\"fst\") }"},{"path":"https://randrescastaneda.github.io/stamp/reference/rand_name.html","id":null,"dir":"Reference","previous_headings":"","what":"General random name — rand_name","title":"General random name — rand_name","text":"General random name","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/rand_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General random name — rand_name","text":"","code":"rand_name(seed = NULL, l = 8)"},{"path":"https://randrescastaneda.github.io/stamp/reference/rand_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General random name — rand_name","text":"seed numeric: seed random name. Default NULL time random name generated . Use replicability purposes l numeric: length name. Default 8","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/rand_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General random name — rand_name","text":"random string name","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/set-call.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and call stamps from .stamp environment — stamp_set","title":"Set and call stamps from .stamp environment — stamp_set","text":"stamp_set() makes use stamp_get() stores stamp .stamp environment, can accesses via stamp_call() stamp_env(). stamp_call()  retrieves one single stamp. stamp_env() display stamps available .stamp env.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/set-call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and call stamps from .stamp environment — stamp_set","text":"","code":"stamp_set(   x,   st_name = NULL,   verbose = getOption(\"stamp.verbose\"),   replace = FALSE,   ... )  stamp_call(st_name)  stamp_env(verbose = getOption(\"stamp.verbose\"))"},{"path":"https://randrescastaneda.github.io/stamp/reference/set-call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and call stamps from .stamp environment — stamp_set","text":"x arbitrary R object passed base::serialize function st_name character: Name stamp set called .stamp env. verbose logical: whether display additional information. changed option \"stamp.verbose\". Default TRUE replace Logical: TRUE st_name already exists .stamp environment, replaced new stamp. FALSE gives error. Default FALSE ... arguments passed stamp_get()","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/set-call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and call stamps from .stamp environment — stamp_set","text":"invisible stamp stamp_get() can now called stamp_call() list stamp values names stamps available .stamp env. stamp available, returns invisible character vector length 0.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/set-call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and call stamps from .stamp environment — stamp_set","text":"","code":"stamp_env() #> ℹ no stamps in .stamp environment x <- data.frame(a = 1:10, b = letters[1:10]) stamp_set(x, st_name = \"xts\") stamp_call(\"xts\") #> $stamps #> $stamps$a #> [1] \"53cc5bfe9b7ff0984828a89b23baba81\" #>  #> $stamps$b #> [1] \"ec07d1f59ebe8e279c9900e255a5cffb\" #>  #>  #> $time #> $time$tz #> [1] \"UTC\" #>  #> $time$tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $time$usetz #> [1] FALSE #>  #> $time$st_time #> [1] \"20230126165416\" #>  #>  #> $algo #> [1] \"spookyhash\" #>   y <- data.frame(a = 5:10, b = letters[5:10]) stamp_set(y, st_name = \"yts\") stamp_env() #> [1] \"yts\" \"xts\""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files with Stamp — st_read","title":"Read files with Stamp — st_read","text":"Read files Stamp","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files with Stamp — st_read","text":"","code":"st_read(   file,   st_dir = NULL,   vintage = NULL,   vintage_dir = NULL,   verbose = getOption(\"stamp.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files with Stamp — st_read","text":"file character: file path read. st_dir character: Directory store stamp files. default subdirectory level file. vintage integer quoted directive. \"available\": displays list available versions measure. \"select\"|\"pick\"|\"choose\": allows user select vintage measure. integer zero negative number (e.g., -1), pip_load_aux load number versions recent version available. , 0, loads current version. -1, load version current, -2 loads two versions current one, . positive number, must quoted (character) form \"%Y%m%d%H%M%S\". \"00\", load recent version data (similar version = 0 version = NULL version = \"0\"). difference \"00\" load recent version vintage folder, rather current version dynamic folder. Thus, attribute \"version\" attr(dd, \"version\") actual version recent vintage file rather attr(dd, \"version\") equal \"current\", default. Option \"00\" useful vintage control vintage_dir character: Directory save vintages x. default subdirectory level file verbose logical: whether display additional information. changed option \"stamp.verbose\". Default TRUE ... used right now","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files with Stamp — st_read","text":"object store file","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write R object with corresponding stamp (hash digest) — st_write","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"st_write function intended wrapper several functions different packages save data disk. Yet, goes several steps beyond . First creates stamps (e.g., hashes) part attributes object saves different file easy access. Also, may create vintage files object keep track changes. philosophy package increase speed processes work many files, avoiding need load files check whether data changed . Since disk space cheap time , stamp may redundant files saves.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"","code":"st_write(   x,   file,   ext = fs::path_ext(file),   st_dir = NULL,   complete_stamp = getOption(\"stamp.completestamp\"),   recurse = FALSE,   force = FALSE,   algo = getOption(\"stamp.digest.algo\"),   vintage = getOption(\"stamp.vintage\"),   vintage_dir = NULL,   verbose = getOption(\"stamp.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"x R object write disk per limitations file format. file character: File connection write ext character: format extension file. Default fs::path_ext(file) st_dir character: Directory store stamp files. default subdirectory level file. complete_stamp logical: Whether add complete report data.frame stamp file. need skimr package. skimr namespace, limited lighter report added. recurse logical: TRUE directory file created. Default FALSE force logical: replace file disk even changed algo character: Algorithm used digest::digest(). Default \"sha1\" vintage logical: Whether save vintage versions x. Default TRUE vintage_dir character: Directory save vintages x. default subdirectory level file verbose logical: whether display additional information. changed option \"stamp.verbose\". Default TRUE ... used right now","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"TRUE object saved successfully. FALSE otherwise.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"Object x stored file hash (.e., stamp) stored subdirectory st_file.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"vintage-files-vintage-files-are-optional-but-play-an-important-role-for","dir":"Reference","previous_headings":"","what":"Vintage files Vintage files are optional but play an important role for","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"replicability purposes. highly recommend turn option enough space disk.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"","code":"if (FALSE) {   tfile <- fs::file_temp(ext = \"qs\")   st_write(df, tfile) }"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stamp: Read and Write R Objects with Data Hash — stamp-package","title":"stamp: Read and Write R Objects with Data Hash — stamp-package","text":"system manage reading writing R objects disk creating saving data signatures (hash).","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stamp: Read and Write R Objects with Data Hash — stamp-package","text":"Maintainer: R.Andres Castaneda acastanedaa@worldbank.org (ORCID)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean .stamp env — stamp_clean","title":"Clean .stamp env — stamp_clean","text":"Clean .stamp env","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean .stamp env — stamp_clean","text":"","code":"stamp_clean(st_name = NULL, verbose = getOption(\"stamp.verbose\"))"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean .stamp env — stamp_clean","text":"st_name chracter: stamp name clean. default NULL, cleans names verbose logica: whether display additional information.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean .stamp env — stamp_clean","text":"invisible TRUE something clened. FALSE otherwise","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean .stamp env — stamp_clean","text":"","code":"stamp_clean() #> ℹ Environment .stamp successfully cleaned"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm stamp has not changed — stamp_confirm","title":"Confirm stamp has not changed — stamp_confirm","text":"verifies , stamp recalculated, match one previously set stamp_set() stamp_save().","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm stamp has not changed — stamp_confirm","text":"","code":"stamp_confirm(   x,   st_dir = NULL,   st_name = NULL,   st_ext = getOption(\"stamp.default.ext\"),   verbose = getOption(\"stamp.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm stamp has not changed — stamp_confirm","text":"x arbitrary R object passed base::serialize function st_dir character: parent directory stamp file saved. st_name character: name stamp (see details). st_ext character: format stamp file save. Default value option \"stamp.default.ext\" verbose logical: whether display additional information. changed option \"stamp.verbose\". Default TRUE ... Arguments passed stamp_get algo character: default value option \"stamp.digest.algo\". argument algorithms used; currently available choices md5, also default, sha1, crc32, sha256, sha512, xxhash32, xxhash64, murmur32, spookyhash blake3 serialize logical variable indicating whether object     serialized using serialize (ASCII     form). Setting FALSE allows compare digest     output given character strings known control output. also     allows use raw vectors output non-ASCII     serialization. file logical variable indicating whether object file     name file name object specified. length Number characters process. default,     length set Inf, whole string file     processed. skip Number input bytes skip calculating     digest. Negative values invalid currently treated zero.     Special value \"auto\" cause serialization header     skipped serialize set TRUE (serialization     header contains R version number thus skipping allows     comparison hashes across platforms R versions). ascii flag passed serialize function     serialize set TRUE, determining whether hash     computed ASCII binary representation. raw logical variable default value FALSE, implying     digest returns digest output ASCII hex values. Set TRUE     return digest output raw (binary) form. Note     option supported implemented hashing     algorithms seed integer seed random number generator.      used xxhash32, xxhash64 murmur32 functions     can used generate additional hashes input     desired. errormode character value denoting choice behaviour     case error: ‘stop’ aborts (default value),     ‘warn’ emits warning returns NULL     ‘silent’ suppresses error returns empty string.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm stamp has not changed — stamp_confirm","text":"Logical value. FALSE objects match  TRUE .","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confirm stamp has not changed — stamp_confirm","text":"st_name name stamp used two different ways. First, st_dir NULL, assumed user refers st_name stamp saved .stamp env stamp saved particular drive. st_dir NULL, st_name name file contains stamp. Notice stamps saved disk prefixed value option \"stamp.stamp_prefix\", default \"st_\". need add prefix, happens \"stamp.stamp_prefix\", ignored.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stamp — stamp_get","title":"Get stamp — stamp_get","text":"calculates displays hash data memory elements first level x. function basically wrapper around digest::digest(). also stores time estimation stamp.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stamp — stamp_get","text":"","code":"stamp_get(   x,   algo = c(getOption(\"stamp.digest.algo\"), \"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\",     \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\", \"blake3\"),   serialize = TRUE,   file = FALSE,   length = Inf,   skip = \"auto\",   ascii = FALSE,   raw = FALSE,   seed = 0,   errormode = c(\"stop\", \"warn\", \"silent\") )"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stamp — stamp_get","text":"x arbitrary R object passed base::serialize function algo character: default value option \"stamp.digest.algo\". argument algorithms used; currently available choices md5, also default, sha1, crc32, sha256, sha512, xxhash32, xxhash64, murmur32, spookyhash blake3 serialize logical variable indicating whether object     serialized using serialize (ASCII     form). Setting FALSE allows compare digest     output given character strings known control output. also     allows use raw vectors output non-ASCII     serialization. file logical variable indicating whether object file     name file name object specified. length Number characters process. default,     length set Inf, whole string file     processed. skip Number input bytes skip calculating     digest. Negative values invalid currently treated zero.     Special value \"auto\" cause serialization header     skipped serialize set TRUE (serialization     header contains R version number thus skipping allows     comparison hashes across platforms R versions). ascii flag passed serialize function     serialize set TRUE, determining whether hash     computed ASCII binary representation. raw logical variable default value FALSE, implying     digest returns digest output ASCII hex values. Set TRUE     return digest output raw (binary) form. Note     option supported implemented hashing     algorithms seed integer seed random number generator.      used xxhash32, xxhash64 murmur32 functions     can used generate additional hashes input     desired. errormode character value denoting choice behaviour     case error: ‘stop’ aborts (default value),     ‘warn’ emits warning returns NULL     ‘silent’ suppresses error returns empty string.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get stamp — stamp_get","text":"digest function returns character string fixed   length containing requested digest supplied R object.   string length 32 MD5; length 40 SHA-1; length 8   CRC32 string; length 8 xxhash32; length 16   xxhash64; length 8 murmur32.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get stamp — stamp_get","text":"Cryptographic hash functions well researched documented.   MD5 algorithm Ron Rivest specified RFC 1321. SHA-1   algorithm specified FIPS-180-1, SHA-2 described   FIPS-180-2. md5, sha-1 sha-256, R implementation relies standalone   implementations C Christophe Devine. crc32, code   zlib library Jean-loup Gailly Mark Adler used. sha-512, standalone implementation Aaron Gifford used. xxhash32 xxhash64, reference implementation Yann Collet used. murmur32, progressive implementation Shane Day used. spookyhash, original source code Bob Jenkins used. R implementation   integrates R's serialization directly algorithm allowing   memory-efficient incremental calculation hash Gabe Becker. blake3, C implementation Samuel Neves Jack O'Connor used. Please note package meant used   cryptographic purposes comprehensive (widely   tested) libraries OpenSSL used. Also, known   crc32 collision-proof. sha-1, recent results indicate   certain cryptographic weaknesses well. details, see example   https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get stamp — stamp_get","text":"","code":"stamp_get(\"abc\") #> $stamps #> $stamps[[1]] #> [1] \"42ae699e08957e40b19ab3976419a232\" #>  #>  #> $time #> $time$tz #> [1] \"UTC\" #>  #> $time$tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $time$usetz #> [1] FALSE #>  #> $time$st_time #> [1] \"20230126165418\" #>  #>  #> $algo #> [1] \"spookyhash\" #>"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Stamp in disk — stamp_save","title":"Save Stamp in disk — stamp_save","text":"Create save file stamp future use","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Stamp in disk — stamp_save","text":"","code":"stamp_save(   x,   st_dir = NULL,   st_name = NULL,   st_ext = getOption(\"stamp.default.ext\"),   stamp = NULL,   x_attr = TRUE,   verbose = getOption(\"stamp.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Stamp in disk — stamp_save","text":"x R object stamp st_dir character: parent directory store stamp file (see details). st_name character: name stamp file. stamp files prefixed value option \"stamp.stamp_prefix\", default \"st_\". need add prefix. st_ext character: format stamp file save. Default value option \"stamp.default.ext\" stamp list stamp stamp_get() case calculated hand. Developers option. used interactively. x_attr logical: whether save attributes x along stamp. Useful quick comparisons verbose logical: Fi TRUE displays information stamping process. ... arguments passed stamp_get()","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_save.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save Stamp in disk — stamp_save","text":"st_dir parent directory. inside st_dir stamp creates another subdirectory name option \"stamp.dir_stamp\" stamps saved. idea objective directory stamps . default, st_dir current directory. last directory name st_dir equal option \"stamp.dir_stamp\", st_dir becomes stamps directory. st_name must prefixed avoid overwriting actual data. just precaution present bumps workflow.  beginning st_name identical value \"stamp.stamp_prefix\", adopted . Otherwise, prefix \"stamp.stamp_prefix\" added st_name. NULL, st_name random name 8 characters.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time parameters — stamp_time","title":"Get time parameters — stamp_time","text":"uses values stored \"stamp.timezone\", \"stamp.timeformat\" \"stamp.usetz\" options","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time parameters — stamp_time","text":"","code":"stamp_time()"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time parameters — stamp_time","text":"list time parameters objects","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time parameters — stamp_time","text":"","code":"stamp_time() #> $tz #> [1] \"UTC\" #>  #> $tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $usetz #> [1] FALSE #>  #> $st_time #> [1] \"20230126165418\" #>"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_x_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Add attributes and characteristics of x to be used in stamp — stamp_x_attr","title":"Add attributes and characteristics of x to be used in stamp — stamp_x_attr","text":"addition information stamp_set, stamp_x_attr generates information attributes R object, including basic descriptive stats.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_x_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add attributes and characteristics of x to be used in stamp — stamp_x_attr","text":"","code":"stamp_x_attr(x)"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_x_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add attributes and characteristics of x to be used in stamp — stamp_x_attr","text":"x R object write disk per limitations file format.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_x_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add attributes and characteristics of x to be used in stamp — stamp_x_attr","text":"list attributes","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_x_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add attributes and characteristics of x to be used in stamp — stamp_x_attr","text":"","code":"x <- data.frame(a = 1:10, b = letters[1:10]) stamp_x_attr(x) #> $names #> [1] \"a\" \"b\" #>  #> $class #> [1] \"data.frame\" #>  #> $row.names #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $skim #> ── Data Summary ──────────────────────── #>                            Values #> Name                       x      #> Number of rows             10     #> Number of columns          2      #> _______________________           #> Column type frequency:            #>   character                1      #>   numeric                  1      #> ________________________          #> Group variables            None   #>  #> ── Variable type: character ──────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate min max empty n_unique whitespace #> 1 b                     0             1   1   1     0       10          0 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean   sd p0  p25 p50  p75 p100 hist  #> 1 a                     0             1  5.5 3.03  1 3.25 5.5 7.75   10 ▇▇▇▇▇ #>  #> $dim #> [1] 10  2 #>  #> $type #> [1] \"list\" #>"},{"path":"https://randrescastaneda.github.io/stamp/reference/vt_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"compare changes vintage of R objects — vt_compare","title":"compare changes vintage of R objects — vt_compare","text":"Compares differences R objects using waldo package. can select whether compare vintages R object used vintages files saved","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/vt_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare changes vintage of R objects — vt_compare","text":"","code":"vt_compare(waldo = getOption(\"stamp.waldo\"))"},{"path":"https://randrescastaneda.github.io/stamp/reference/vt_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare changes vintage of R objects — vt_compare","text":"waldo logical: whether display waldo::compare results objects different. Requires package waldo. namespace, base::identical() executed.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/vt_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare changes vintage of R objects — vt_compare","text":"Logic value. TRUE objects identival, FALSE otherwise.","code":""}]
