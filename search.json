[{"path":"https://randrescastaneda.github.io/stamp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 stamp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://randrescastaneda.github.io/stamp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andres Castaneda. Author, maintainer.","code":""},{"path":"https://randrescastaneda.github.io/stamp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castaneda R (2023). stamp: Read Write R Objects Data Hash. https://github.com/randrescastaneda/stamp, https://randrescastaneda.github.io/stamp/.","code":"@Manual{,   title = {stamp: Read and Write R Objects with Data Hash},   author = {R.Andres Castaneda},   year = {2023},   note = {https://github.com/randrescastaneda/stamp, https://randrescastaneda.github.io/stamp/}, }"},{"path":"https://randrescastaneda.github.io/stamp/index.html","id":"stamp","dir":"","previous_headings":"","what":"Read and Write R Objects with Data Hash","title":"Read and Write R Objects with Data Hash","text":"goal stamp …","code":""},{"path":"https://randrescastaneda.github.io/stamp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and Write R Objects with Data Hash","text":"can install development version stamp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"randrescastaneda/stamp\")"},{"path":"https://randrescastaneda.github.io/stamp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Read and Write R Objects with Data Hash","text":"basic example shows solve common problem:","code":"library(stamp) ## basic example code"},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"change file extension to new ext — change_file_ext","title":"change file extension to new ext — change_file_ext","text":"change file extension new ext","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"change file extension to new ext — change_file_ext","text":"","code":"change_file_ext(file, ext)"},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"change file extension to new ext — change_file_ext","text":"file character: current file path old ext ext character: new ext","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/change_file_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"change file extension to new ext — change_file_ext","text":"character file path","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whther object can be saved in tabular formats like fst — check_complex_data","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"Check whther object can saved tabular formats like fst","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"","code":"check_complex_data(x)"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"x R object write disk per limitations file format.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"logical complex data","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_complex_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whther object can be saved in tabular formats like fst — check_complex_data","text":"","code":"# False check_complex_data(data.frame()) #> [1] FALSE  # TRUE check_complex_data(list()) #> [1] TRUE"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that file format is supported and that package is available — check_file","title":"Check that file format is supported and that package is available — check_file","text":"Check file format supported package available","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that file format is supported and that package is available — check_file","text":"","code":"check_file(file)"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that file format is supported and that package is available — check_file","text":"file character: file path read","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that file format is supported and that package is available — check_file","text":"invisible TRUE","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the format is in Namespace — check_format","title":"Check whether the format is in Namespace — check_format","text":"Use valus ext check corresponding package available. , defaults Rds","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the format is in Namespace — check_format","text":"","code":"check_format(ext = \"Rds\", file_ext)"},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the format is in Namespace — check_format","text":"ext character: format extension file. Default fs::path_ext(file) file_ext character: File extension","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the format is in Namespace — check_format","text":"character extension desired format","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/check_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the format is in Namespace — check_format","text":"","code":"fmt <- check_format(file_ext = \"fst\") #> Warning: Format provided, .rds, is different from format in file name, .fst. The former #> will be used. fmt #> [1] \"rds\""},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure file names and directory paths are working fine — ensure_file_path","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"Make sure file names directory paths working fine","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"","code":"ensure_file_path(file, recurse)"},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"file character: File connection write recurse logical: TRUE directory file created. Default FALSE","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/ensure_file_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure file names and directory paths are working fine — ensure_file_path","text":"character vector file path","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading function depending on format selected — get_reading_fun","title":"Reading function depending on format selected — get_reading_fun","text":"Reading function depending format selected","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading function depending on format selected — get_reading_fun","text":"","code":"get_reading_fun(ext = \"Rds\")"},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading function depending on format selected — get_reading_fun","text":"ext character: format extension file. Default fs::path_ext(file)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading function depending on format selected — get_reading_fun","text":"reading function according ext","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_reading_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading function depending on format selected — get_reading_fun","text":"","code":"# Rds default read_fun <- get_reading_fun() read_fun #> function (x, path, ...)  #> readRDS(object = x, file = path, ...) #> <bytecode: 0x556aded0ce78> #> <environment: 0x556aded109d0>  if (FALSE) { # fst format read_fun <- get_reading_fun(ext=\"fst\") read_fun }"},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Saving function depending on format selected — get_saving_fun","title":"Saving function depending on format selected — get_saving_fun","text":"Saving function depending format selected","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saving function depending on format selected — get_saving_fun","text":"","code":"get_saving_fun(ext = \"Rds\")"},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saving function depending on format selected — get_saving_fun","text":"ext character: format extension file. Default fs::path_ext(file)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saving function depending on format selected — get_saving_fun","text":"saving function according ext returns logical value depending whether file saved successfully","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/get_saving_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saving function depending on format selected — get_saving_fun","text":"","code":"# Rds default save_fun <- get_saving_fun() save_fun #> function (x, path, ...)  #> { #>     t1 <- Sys.time() #>     Sys.sleep(0.2) #>     sv(x, path, ...) #>     saved <- t1 <= file.mtime(path) #>     names(saved) <- path #>     return(saved) #> } #> <bytecode: 0x556add9fa300> #> <environment: 0x556add9fadb8>  # fst format if (FALSE) { save_fun <- get_saving_fun(ext=\"fst\") save_fun }"},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file names and paths — path_info","title":"Get file names and paths — path_info","text":"Get file names paths","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file names and paths — path_info","text":"","code":"path_info(   file,   ext = fs::path_ext(file),   st_dir = NULL,   vintage = getOption(\"stamp.vintage\"),   vintage_dir = NULL,   recurse = FALSE )"},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file names and paths — path_info","text":"file character: File connection write ext character: format extension file. Default fs::path_ext(file) st_dir character: Directory store stamp files. default subdirectory level file. vintage logical: Whether save vintage versions x. Default TRUE vintage_dir character: Directory save vintages x. default subdirectory level file recurse logical: TRUE directory file created. Default FALSE","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/path_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file names and paths — path_info","text":"list directories files information","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether format is supported and package is available — pkg_available","title":"Check whether format is supported and package is available — pkg_available","text":"Check whether format supported package available","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether format is supported and package is available — pkg_available","text":"","code":"pkg_available(ext)"},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether format is supported and package is available — pkg_available","text":"ext character: extension file","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether format is supported and package is available — pkg_available","text":"logical vector availability package","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/pkg_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether format is supported and package is available — pkg_available","text":"","code":"if (FALSE) { pkg_available(\"fst\") }"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Add attributes and characteristics of x to stamp file — st_attr","title":"Add attributes and characteristics of x to stamp file — st_attr","text":"Add attributes characteristics x stamp file","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add attributes and characteristics of x to stamp file — st_attr","text":"","code":"st_attr(   x,   hash = NULL,   complete_stamp = getOption(\"stamp.completestamp\"),   algo = getOption(\"stamp.digest.algo\") )"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add attributes and characteristics of x to stamp file — st_attr","text":"x R object write disk per limitations file format. hash character: stamp previously calculated. otherwise added complete_stamp logical: Whether add complete report data.frame stamp file. need skimr package. skimr namespace, limited lighter report added. algo character: Algorithm used digest::digest(). Default \"sha1\"","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add attributes and characteristics of x to stamp file — st_attr","text":"list attributes","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add attributes and characteristics of x to stamp file — st_attr","text":"","code":"x <- data.frame(a = 1:10, b = letters[1:10]) st_attr(x) #> $names #> [1] \"a\" \"b\" #>  #> $class #> [1] \"data.frame\" #>  #> $row.names #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $skim #> ── Data Summary ──────────────────────── #>                            Values #> Name                       x      #> Number of rows             10     #> Number of columns          2      #> _______________________           #> Column type frequency:            #>   character                1      #>   numeric                  1      #> ________________________          #> Group variables            None   #>  #> ── Variable type: character ──────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate min max empty n_unique whitespace #> 1 b                     0             1   1   1     0       10          0 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean   sd p0  p25 p50  p75 p100 hist  #> 1 a                     0             1  5.5 3.03  1 3.25 5.5 7.75   10 ▇▇▇▇▇ #>  #> $stamp #> [1] \"5d3f6593e2ec5d9466ab891f29c5b6734064b056\" #>"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files with Stamp — st_read","title":"Read files with Stamp — st_read","text":"Read files Stamp","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files with Stamp — st_read","text":"","code":"st_read(   file,   st_dir = NULL,   vintage = NULL,   vintage_dir = NULL,   verbose = getOption(\"stamp.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files with Stamp — st_read","text":"file character: file path read. st_dir character: Directory store stamp files. default subdirectory level file. vintage integer quoted directive. \"available\": displays list available versions measure. \"select\"|\"pick\"|\"choose\": allows user select vintage measure. integer zero negative number (e.g., -1), pip_load_aux load number versions recent version available. , 0, loads current version. -1, load version current, -2 loads two versions current one, . positive number, must quoted (character) form \"%Y%m%d%H%M%S\". \"00\", load recent version data (similar version = 0 version = NULL version = \"0\"). difference \"00\" load recent version vintage folder, rather current version dynamic folder. Thus, attribute \"version\" attr(dd, \"version\") actual version recent vintage file rather attr(dd, \"version\") equal \"current\", default. Option \"00\" useful vintage control vintage_dir character: Directory save vintages x. default subdirectory level file verbose logical: whether display additional information. changed option \"stamp.verbose\". Default TRUE ... used right now","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files with Stamp — st_read","text":"object store file","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write R object with corresponding stamp (hash digest) — st_write","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"st_write function intended wrapper several functions different packages save data disk. Yet, goes several steps beyond . First creates stamps (e.g., hashes) part attributes object saves different file easy access. Also, may create vintage files object keep track changes. philosophy package increase speed processes work many files, avoiding need load files check whether data changed . Since disk space cheap time , stamp may redundant files saves.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"","code":"st_write(   x,   file,   ext = fs::path_ext(file),   st_dir = NULL,   complete_stamp = getOption(\"stamp.completestamp\"),   recurse = FALSE,   force = FALSE,   algo = getOption(\"stamp.digest.algo\"),   vintage = getOption(\"stamp.vintage\"),   vintage_dir = NULL,   verbose = getOption(\"stamp.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"x R object write disk per limitations file format. file character: File connection write ext character: format extension file. Default fs::path_ext(file) st_dir character: Directory store stamp files. default subdirectory level file. complete_stamp logical: Whether add complete report data.frame stamp file. need skimr package. skimr namespace, limited lighter report added. recurse logical: TRUE directory file created. Default FALSE force logical: replace file disk even changed algo character: Algorithm used digest::digest(). Default \"sha1\" vintage logical: Whether save vintage versions x. Default TRUE vintage_dir character: Directory save vintages x. default subdirectory level file verbose logical: whether display additional information. changed option \"stamp.verbose\". Default TRUE ... used right now","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"TRUE object saved successfully. FALSE otherwise.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"Object x stored file hash (.e., stamp) stored subdirectory st_file.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"vintage-files-vintage-files-are-optional-but-play-an-important-role-for","dir":"Reference","previous_headings":"","what":"Vintage files Vintage files are optional but play an important role for","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"replicability purposes. highly recommend turn option enough space disk.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/st_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write R object with corresponding stamp (hash digest) — st_write","text":"","code":"if (FALSE) {   tfile <- fs::file_temp(ext = \"qs\")   st_write(df, tfile) }"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stamp: Read and Write R Objects with Data Hash — stamp-package","title":"stamp: Read and Write R Objects with Data Hash — stamp-package","text":"system manage reading writing R objects disk creating saving data signatures (hash).","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stamp: Read and Write R Objects with Data Hash — stamp-package","text":"Maintainer: R.Andres Castaneda acastanedaa@worldbank.org (ORCID)","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — stamp_confirm","title":"Title — stamp_confirm","text":"Title","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_confirm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — stamp_confirm","text":"","code":"stamp_confirm()"},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stamp — stamp_get","title":"Get stamp — stamp_get","text":"basically wrapper around digest::digest()","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stamp — stamp_get","text":"","code":"stamp_get(   x,   algo = c(getOption(\"stamp.digest.algo\"), \"md5\", \"sha1\", \"crc32\", \"sha256\", \"sha512\",     \"xxhash32\", \"xxhash64\", \"murmur32\", \"spookyhash\", \"blake3\"),   serialize = TRUE,   file = FALSE,   length = Inf,   skip = \"auto\",   ascii = FALSE,   raw = FALSE,   seed = 0,   errormode = c(\"stop\", \"warn\", \"silent\") )"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stamp — stamp_get","text":"x arbitrary R object passed base::serialize function algo character: default value option \"stamp.digest.algo\". argument algorithms used; currently available choices md5, also default, sha1, crc32, sha256, sha512, xxhash32, xxhash64, murmur32, spookyhash blake3 serialize logical variable indicating whether object     serialized using serialize (ASCII     form). Setting FALSE allows compare digest     output given character strings known control output. also     allows use raw vectors output non-ASCII     serialization. file logical variable indicating whether object file     name file name object specified. length Number characters process. default,     length set Inf, whole string file     processed. skip Number input bytes skip calculating     digest. Negative values invalid currently treated zero.     Special value \"auto\" cause serialization header     skipped serialize set TRUE (serialization     header contains R version number thus skipping allows     comparison hashes across platforms R versions). ascii flag passed serialize function     serialize set TRUE, determining whether hash     computed ASCII binary representation. raw logical variable default value FALSE, implying     digest returns digest output ASCII hex values. Set TRUE     return digest output raw (binary) form. Note     option supported implemented hashing     algorithms seed integer seed random number generator.      used xxhash32, xxhash64 murmur32 functions     can used generate additional hashes input     desired. errormode character value denoting choice behaviour     case error: ‘stop’ aborts (default value),     ‘warn’ emits warning returns NULL     ‘silent’ suppresses error returns empty string.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get stamp — stamp_get","text":"digest function returns character string fixed   length containing requested digest supplied R object.   string length 32 MD5; length 40 SHA-1; length 8   CRC32 string; length 8 xxhash32; length 16   xxhash64; length 8 murmur32.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get stamp — stamp_get","text":"Cryptographic hash functions well researched documented.   MD5 algorithm Ron Rivest specified RFC 1321. SHA-1   algorithm specified FIPS-180-1, SHA-2 described   FIPS-180-2. md5, sha-1 sha-256, R implementation relies standalone   implementations C Christophe Devine. crc32, code   zlib library Jean-loup Gailly Mark Adler used. sha-512, standalone implementation Aaron Gifford used. xxhash32 xxhash64, reference implementation Yann Collet used. murmur32, progressive implementation Shane Day used. spookyhash, original source code Bob Jenkins used. R implementation   integrates R's serialization directly algorithm allowing   memory-efficient incremental calculation hash Gabe Becker. blake3, C implementation Samuel Neves Jack O'Connor used. Please note package meant used   cryptographic purposes comprehensive (widely   tested) libraries OpenSSL used. Also, known   crc32 collision-proof. sha-1, recent results indicate   certain cryptographic weaknesses well. details, see example   https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get stamp — stamp_get","text":"","code":"stamp_get(\"abc\") #> [1] \"3acfb2a40fdb0360028e0095e228180be78b684c\""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set an attribute stamp to R object — stamp_set","title":"Set an attribute stamp to R object — stamp_set","text":"Set attribute stamp R object","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set an attribute stamp to R object — stamp_set","text":"","code":"stamp_set(x, ...)"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set an attribute stamp to R object — stamp_set","text":"... Arguments passed stamp_get x arbitrary R object passed base::serialize function algo character: default value option \"stamp.digest.algo\". argument algorithms used; currently available choices md5, also default, sha1, crc32, sha256, sha512, xxhash32, xxhash64, murmur32, spookyhash blake3 serialize logical variable indicating whether object     serialized using serialize (ASCII     form). Setting FALSE allows compare digest     output given character strings known control output. also     allows use raw vectors output non-ASCII     serialization. file logical variable indicating whether object file     name file name object specified. length Number characters process. default,     length set Inf, whole string file     processed. skip Number input bytes skip calculating     digest. Negative values invalid currently treated zero.     Special value \"auto\" cause serialization header     skipped serialize set TRUE (serialization     header contains R version number thus skipping allows     comparison hashes across platforms R versions). ascii flag passed serialize function     serialize set TRUE, determining whether hash     computed ASCII binary representation. raw logical variable default value FALSE, implying     digest returns digest output ASCII hex values. Set TRUE     return digest output raw (binary) form. Note     option supported implemented hashing     algorithms seed integer seed random number generator.      used xxhash32, xxhash64 murmur32 functions     can used generate additional hashes input     desired. errormode character value denoting choice behaviour     case error: ‘stop’ aborts (default value),     ‘warn’ emits warning returns NULL     ‘silent’ suppresses error returns empty string.","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set an attribute stamp to R object — stamp_set","text":"R object x attribute stamp","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set an attribute stamp to R object — stamp_set","text":"","code":"x <- data.frame(a = 1:10, b = letters[1:10]) stamp_set(x) |> attr(which = \"stamp\") #> [1] \"5d3f6593e2ec5d9466ab891f29c5b6734064b056\""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time parameters — stamp_time","title":"Get time parameters — stamp_time","text":"uses values stored \"stamp.timezone\", \"stamp.timeformat\" \"stamp.usetz\" options","code":""},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time parameters — stamp_time","text":"","code":"stamp_time()"},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time parameters — stamp_time","text":"list time parameters objects","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/stamp/reference/stamp_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time parameters — stamp_time","text":"","code":"stamp_time() #> $tz #> [1] \"UTC\" #>  #> $tformat #> [1] \"%Y%m%d%H%M%S\" #>  #> $usetz #> [1] FALSE #>  #> $st_time #> [1] \"20230119153258\" #>"}]
